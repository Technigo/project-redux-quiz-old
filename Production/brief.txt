from quiz.js:


    /**
     * Use this action when a user selects an answer to the question.
     * The answer will be stored in the `quiz.answers` state with the
     * following values:
     *
     *    questionId  - The id of the question being answered.
     *    answerIndex - The index of the selected answer from the question's options.
     *    question    - A copy of the entire question object, to make it easier to show
     *                  details about the question in your UI.
     *    answer      - The answer string.
     *    isCorrect   - true/false if the answer was the one which the question says is correct.
     *
     * When dispatching this action, you should pass an object as the payload with `questionId`
     * and `answerIndex` keys. See the readme for more details.
     */


---

## **Redux actions**
In theÂ `quiz`Â store, there's a few actions made for you:

### **`submitAnswer`**
Use this action when a user selects an answer to the question. You need to pass an object with a keyÂ `questionId`Â whose value is valid question id (from the question objects) and anÂ `answerIndex`Â which is the index of the answer they chose.

- **Show submitAnswer example**
Given the following question, for example:

```jsx
{ id: 1, question: 'Who set the Olympic record for the 100m dash in 2012?', options: ['Usain Bolt', 'Justin Gatlin', 'Tyson Gay', 'Asafa Powell'], correctAnswerIndex: 0 }
```

If the user clicks 'Asafa Powell' (index 3 in the options array), you'd dispatch the action to redux like this:

```jsx
dispatch(quiz.actions.submitAnswer({ questionId: 1, answerIndex: 3 }))
```

The redux state will then update the answers array and tell you if this was the correct answer or not.


### **`goToNextQuestion`**
After the user clicks an answer and you show them if they were correct or not, you should show a button to continue to the next question. When they click that button, dispatch this action.

- **Show goToNextQuestion example**
dispatch(quiz.actions.goToNextQuestion())




### **`restart`**
At the end of the quiz, if you want to start over, you can dispatch this action.

- **Show restart example**
dispatch(quiz.actions.restart())
---

## **Selecting from the store**

Use the redux dev tools in chrome to inspect the store and see what it contains. You can write your own selectors to fetch whatever you need from the store. We've given you one example in `./src/components/CurrentQuestion.js` to get you started with fetching the current question from the store:

```jsx
const question = useSelector((state) => state.quiz.questions[state.quiz.currentQuestionIndex])
```

You can build up these selector functions to use other information you have to fetch specific things. For example, you could fetch the answer to a question:

```jsx
const answer = useSelector((state) => state.quiz.answers.find((a) => ( a.questionId === question.id // question could come from the previous selector in the last example
)))
```
---

## **What you will learnÂ ðŸ§ **
- How to interact with your store using selectors or by dispatching actions
- Practice working in a development team
---
## Requirements ðŸ§ª
Your project should fulfill the **ðŸ”µ  Blue Level** and all of the **General Requirements.** Use the **ðŸ”´  Red Level** and **âš«  Black Level** to push your knowledge to the next level!

**ðŸ”µ  Blue Level (Minimum Requirements)**
x - Your quiz should have at least 5 questions.
x - When the user selects an answer, it should show if they were correct or not.
x - While going through the quiz, it should show which question you're on, or how many left - for example 'Question 5 / 15' or '10 questions left'.
x - When the user has answered all the questions, they should get to a summary screen which tells them how many they got correct or incorrect.
x - You should challenge yourself to make use of redux by making small components which interact with the store - don't just go for one big component.
x - Don't forget CSS! Your quiz should be well styled.


**ðŸ”´  Red Level (Intermediary Goals)**
- After selecting an answer, highlight the correct answer if they chose incorrectly.
- Create a visual progress bar showing how many questions are left to be answered.
- Use images or videos to make your questions and answers look richer.
- Give a score for correct answers and deduct points for incorrect answers. If the user goes below a certain score, they lose!
- Enrich the summary with information about what questions they got correct and what questions they should practice more


**âš«  Black Level (Advanced Goals)**
- Implement a countdown timer to answer the question - if the user doesn't answer in time, they get the question wrong.
- Implement a timer to show the user how long it took to complete the quiz.